// Generated by CoffeeScript 1.12.7
(function() {
  var $, Collection, RemoteDb, _, async, jQueryHttpClient, quickfind, utils;

  _ = require('lodash');

  $ = require('jquery');

  async = require('async');

  utils = require('./utils');

  jQueryHttpClient = require('./jQueryHttpClient');

  quickfind = require('./quickfind');

  module.exports = RemoteDb = (function() {
    function RemoteDb(url, client, httpClient, useQuickFind) {
      if (useQuickFind == null) {
        useQuickFind = false;
      }
      this.url = url;
      this.client = client;
      this.collections = {};
      this.httpClient = httpClient;
      this.useQuickFind = useQuickFind;
    }

    RemoteDb.prototype.addCollection = function(name, options, success, error) {
      var collection, ref, url;
      if (options == null) {
        options = {};
      }
      if (_.isFunction(options)) {
        ref = [{}, options, success], options = ref[0], success = ref[1], error = ref[2];
      }
      url = options.url || (this.url + name);
      collection = new Collection(name, url, this.client, this.httpClient, this.useQuickFind);
      this[name] = collection;
      this.collections[name] = collection;
      if (success != null) {
        return success();
      }
    };

    RemoteDb.prototype.removeCollection = function(name, success, error) {
      delete this[name];
      delete this.collections[name];
      if (success != null) {
        return success();
      }
    };

    RemoteDb.prototype.getCollectionNames = function() {
      return _.keys(this.collections);
    };

    return RemoteDb;

  })();

  Collection = (function() {
    function Collection(name, url, client, httpClient, useQuickFind) {
      this.name = name;
      this.url = url;
      this.client = client;
      this.httpClient = httpClient || jQueryHttpClient;
      this.useQuickFind = useQuickFind;
    }

    Collection.prototype.find = function(selector, options) {
      if (options == null) {
        options = {};
      }
      return {
        fetch: (function(_this) {
          return function(success, error) {
            var params;
            params = {};
            if (options.sort) {
              params.sort = JSON.stringify(options.sort);
            }
            if (options.limit) {
              params.limit = options.limit;
            }
            if (options.skip) {
              params.skip = options.skip;
            }
            if (options.fields) {
              params.fields = JSON.stringify(options.fields);
            }
            if (_this.client) {
              params.client = _this.client;
            }
            params.selector = JSON.stringify(selector || {});
            if ((typeof navigator !== "undefined" && navigator !== null) && navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {
              params._ = new Date().getTime();
            }
            if (_this.useQuickFind && options.localData && (!options.fields || options.fields._rev) && !(options.limit && !options.sort)) {
              return _this.httpClient("POST", _this.url + "/quickfind", params, quickfind.encodeRequest(options.localData), function(encodedResponse) {
                return success(quickfind.decodeResponse(encodedResponse, options.localData, options.sort));
              }, error);
            } else {
              return _this.httpClient("GET", _this.url, params, null, success, error);
            }
          };
        })(this)
      };
    };

    Collection.prototype.findOne = function(selector, options, success, error) {
      var params, ref;
      if (options == null) {
        options = {};
      }
      if (_.isFunction(options)) {
        ref = [{}, options, success], options = ref[0], success = ref[1], error = ref[2];
      }
      params = {};
      if (options.sort) {
        params.sort = JSON.stringify(options.sort);
      }
      params.limit = 1;
      if (this.client) {
        params.client = this.client;
      }
      params.selector = JSON.stringify(selector || {});
      if ((typeof navigator !== "undefined" && navigator !== null) && navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {
        params._ = new Date().getTime();
      }
      return this.httpClient("GET", this.url, params, null, function(results) {
        if (results && results.length > 0) {
          return success(results[0]);
        } else {
          return success(null);
        }
      }, error);
    };

    Collection.prototype.upsert = function(docs, bases, success, error) {
      var basesPresent, items, params, ref, results;
      ref = utils.regularizeUpsert(docs, bases, success, error), items = ref[0], success = ref[1], error = ref[2];
      if (!this.client) {
        throw new Error("Client required to upsert");
      }
      results = [];
      basesPresent = _.compact(_.pluck(items, "base")).length > 0;
      params = {
        client: this.client
      };
      if ((typeof navigator !== "undefined" && navigator !== null) && navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {
        params._ = new Date().getTime();
      }
      if (items.length === 1) {
        if (basesPresent) {
          return this.httpClient("PATCH", this.url, params, items[0], function(result) {
            if (_.isArray(docs)) {
              return success([result]);
            } else {
              return success(result);
            }
          }, function(err) {
            if (error) {
              return error(err);
            }
          });
        } else {
          return this.httpClient("POST", this.url, params, items[0].doc, function(result) {
            if (_.isArray(docs)) {
              return success([result]);
            } else {
              return success(result);
            }
          }, function(err) {
            if (error) {
              return error(err);
            }
          });
        }
      } else {
        if (basesPresent) {
          return this.httpClient("PATCH", this.url, params, {
            doc: _.pluck(items, "doc"),
            base: _.pluck(items, "base")
          }, function(result) {
            return success(result);
          }, function(err) {
            if (error) {
              return error(err);
            }
          });
        } else {
          return this.httpClient("POST", this.url, params, _.pluck(items, "doc"), function(result) {
            return success(result);
          }, function(err) {
            if (error) {
              return error(err);
            }
          });
        }
      }
    };

    Collection.prototype.remove = function(id, success, error) {
      var params;
      if (!this.client) {
        throw new Error("Client required to remove");
      }
      params = {
        client: this.client
      };
      return this.httpClient("DELETE", this.url + "/" + id, params, null, success, function(err) {
        if (err.status === 410) {
          return success();
        } else {
          return error(err);
        }
      });
    };

    return Collection;

  })();

}).call(this);
